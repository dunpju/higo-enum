package {{.Package}}

import (
	"fmt"
)

var (
	enums m
)

const (
	{{- range $i,$v := .EnumMap}}
	{{$v.Key}} {{$.Name}} = {{$v.Value}} //{{$v.Doc}}
    {{- end}}
)

func init() {
	enums = e().
        {{- range $i,$v := .EnumMap}}
        {{- if eq $i $.LenMap}}
        append({{$v.Key}}, newEnum(int({{$v.Key}}), "{{$v.Doc}}"))
        {{- else}}
        append({{$v.Key}}, newEnum(int({{$v.Key}}), "{{$v.Doc}}")).
        {{- end}}
	    {{- end}}
}

type enum struct {
	code    int
	message string
}

func newEnum(code int, message string) *enum {
	return &enum{code: code, message: message}
}

type m map[{{.Name}}]*enum

func e() m {
	return make(map[{{.Name}}]*enum)
}

func (this m) append(key {{.Name}}, value *enum) m {
	this[key] = value
	return this
}

func Inspect(value {{.EnumType}}) error {
	_, err := {{.Name}}(value).inspect()
	if err != nil {
		return err
	}
	return nil
}

func Get(code {{.EnumType}}) {{.Name}} {
	_ = {{.Name}}(code).get()
	return {{.Name}}(code)
}

// {{.Name}} {{.Doc}}
type {{.Name}} {{.EnumType}}

func (this {{.Name}}) inspect() (*enum, error) {
	if e, ok := enums[this]; ok {
		return e, nil
	}
	return nil, fmt.Errorf("%d enum undefined", this)
}

func (this {{.Name}}) get() *enum {
	e, err := this.inspect()
	if err != nil {
		panic(err)
	}
	return e
}

func (this {{.Name}}) Code() int {
	return this.get().code
}

func (this {{.Name}}) Message() string {
	return this.get().message
}
